********************************добавочные коды и другое********************************************
_______________________________
добавление метода __str__ в модель Aaaaaa, 
отредактировав файл posts/models.py, следующим образом:   

from django.db import models
class Aaaaaa(models.Model):
    переменная = models.TextField()
    def __str__(self):  
        return self.переменная[:50]        
________________________________

python manage.py changepassword root - сброс пароля
pip install ipython                  - интерактивный питон
python manage.py shell               - запуск интерактивного питона

___________________________________________

---------------------------------------создание записи из терминала-------------------------------
терминал python manage.py shell

from posts.models import Xxxx
second_post=Xxxx.objects.create(переменная из модели='мой текст из терминала')
save()

____________________________ещё способ

python manage.py shell

переменная = Xxxx(переменная из модели='Моя третья запись в БД')
переменная.save()

____________________________ещё способ

from posts.models import Post
third2_post = Post(text='Моя 4 запись в БД')
third2_post.pk
third2_post.text

---------------------------------------чтение записи из терминала-------------------------------
___________________________________________
чтение данных из БД
python manage.py shell

my_post = Article.objects.get(id=1)

my_post

и получаем пост по id

my_post = Post.objects.get(pk=3)
my_post

-------------------исключение
try:
my_post = Post.objects.get(text="какой-то текст")

try:
    my_post = Post.objects.get(text='какой-то текст')
except Post.DoesNotExist:
    print("Post not found")
except Post.MultipleObjectsReturned:
    print("Multiple posts found")

________________________________ получение данных (собственно тоже чтение)

posts = Post.objects.all()
posts

for post in posts:
   ...:     print(post.id, post.text)

1 Привет Django!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
2 Ещё один пост он нужен чтобы посмотреть его и прочитать все слова которые здесь написаны!!!
4 мой текст из терминала
5 Моя третья запись в БД 


________________________________ filter


posts = Post.objects.filter(pk=2)
posts = Post.objects.filter(id=2)
posts
posts = Post.objects.exclude(id=2)
posts = Post.objects.all()[0]
posts

posts = Post.objects.all()[:2]

_____________________________обновление моделей

post_1 = Post.objects.get(id=1)
post_1.text = 'мой первый текст через ОРМ запрос'
post_1.save(update_fields=['text'])
post_1.text
post_1.pk

Post.objects.filter(id=2).update(text='моя вторая изменённая запись')
post = Post.objects.get(id=2)
post

Post.objects.update(text='все посты изменены')

post = Post.objects.all()
post
________________________________
удаление записей

post_2 = Post.objects.get(id=2)
post_2.delete()
post = Post.objects.all()
post

my_posts = Post.objects.all()
print(my_posts.query)

from django.db import connection, reset_queries
reset_queries()
my_post=Post.objects.get(id=1)
print(connection.queries)

________________________________





************************************************** ЗАДАЧА 4 ****************************************

1. создаём проект (папка homework_article)

2. запускаем терминал и подключаем виртуальное окружение
python -m venv venv

3. активируем виртуальное окружение
venv_article\Scripts\activate

4. устанавливаем джанго
pip install django

5. обновляем pip 
python -m pip install --upgrade pip

6. проверяем наличие пакетов
pip list

7. Создаем проект джанго в конце через пробел ставим точку
django-admin startproject main .

8. запускаем джанго 
python manage.py runserver

9. тушим сервер
ctr + c

8. проверяем наличие команд manage.py
python manage.py

9. применяем миграцию моделей уже имеющихся по умолчанию в джанго
python manage.py migrate

10. создаём приложение
python manage.py startapp article

12. в файл main/settings.py вносим изменения
*********************
INSTALLED_APPS = [
    ... ,
    ... ,

    'article',     
]

LANGUAGE_CODE = 'en-us'
на
LANGUAGE_CODE = 'ru-ru' 

TIME_ZONE = 'UTC'
на
TIME_ZONE = 'Europe/Samara'
******************
____________________________________________________
14. Открываем models.py

from django.db import models

from django.db import models

class Article(models.Model):
    title   = models.CharField(max_length=200, verbose_name='заголовок')
    date    = models.DateTimeField(verbose_name='дата')
    content = models.TextField(verbose_name='содержание')
    status  = models.IntegerField(verbose_name='статус')

делаем миграции

python manage.py makemigrations article                                 
python manage.py migrate

_____________________________
создаём супер пользователя

python manage.py createsuperuser
Username: root
Email address: 
Password:  root                             -- пароль не видно когда печатаешь
Password (again):  root
The password is too similar to the username.
This password is too short. It must contain at least 8 characters.
This password is too common.
Bypass password validation and create user anyway? [y/N]: y
Superuser created successfully.
____________________________________________________
зарегистрирует модель Article в admin.py:

from django.contrib import admin
from .models import Article

admin.site.register(Article)         

_________________________________________
python manage.py shell

запрос по заданию
Используя метод get() стандартного менеджера модели Article, 
получите запись со значением поля title равным Django 5 для начинающих.

Внёс дополнения а то было Django 5 стало Django 5 для начинающих
Article.objects.filter(id=1).update(title='Django 5 для начинающих')
article = Article.objects.get(id=1)
article

смотри ниже по запросам если есть строковое или нет, там разные варианты
то есть если нет строкового представления в модели то поиск по названию возвращает объект
в определённых случаях

_________________________________________________
делаю запрос по заданию для строкового представления в модели
from article.models import Article

article = Article.objects.get(id=1)
article

___________________________________________________
получения данных если нет строкового представления в модели
article = Article.objects.get(id=1)
article
Out[9]: <Article: Article object (1)>

x = article
x.title
Out[11]: 'Django 5 для начинающих'
___________________________________________________
делаю запрос по заданию для строкового представления в модели

In [9]: article = Article.objects.get(title="Django 5 для начинающих")

In [10]: article
Out[10]: <Article: Django 5 для начинаю>
___________________________________________________
получения данных если нет строкового представления в модели
In [1]: from article.models import Article

In [2]: article = Article.objects.get(title="Django 5 для начинающих")

In [3]: article
Out[3]: <Article: Article object (1)>

********************************************************************************************
вот ещё интерсный код даёт возможность получения всех столбцов из таблицы Article
In [6]: from article.models import Article

In [7]: Article.objects.all()
Out[7]: <QuerySet [<Article: Article object (1)>]>

In [8]: from django.db import connection

In [9]: connection.queries
Out[9]: 
[{'sql': 'SELECT "article_article"."id", "article_article"."title", 
"article_article"."date", "article_article"."content", "article_article"."status" 
FROM "article_article" LIMIT 21',
  'time': '0.001'}]

теперь можно сделать выборку по полям
In [10]: article = Article.objects.values("id", "title", "date", "content", "status")

In [11]: article
Out[11]: <QuerySet [{'id': 1, 'title': 'Django 5 для начинающих', 'date': datetime.datetime(2025, 10, 24, 15, 42, 59, tzinfo=datetime.timezone.utc), 'content': 'Django 5 - очень классно, всем рекомендую, ну и не только 5 а именно Django', 'status': 1}]>

In [12]: x = article
In [15]: x[0]
-----------------------------------здесь уже на выходе получаем словарь
Out[15]: 
{'id': 1,
 'title': 'Django 5 для начинающих',
 'date': datetime.datetime(2025, 10, 24, 15, 42, 59, tzinfo=datetime.timezone.utc),
 'content': 'Django 5 - очень классно, всем рекомендую, ну и не только 5 а именно Django',
 'status': 1}

-----------------------------------можно пройтись циклом по классу
In [23]: for i in x:
    ...:     print(i)
    ...: 
{'id': 1, 'title': 'Django 5 для начинающих', 'date': 
datetime.datetime(2025, 10, 24, 15, 42, 59, tzinfo=datetime.timezone.utc), 
'content': 'Django 5 - очень классно, всем рекомендую, ну и не только 5 а именно Django', 'status': 1}

___________________________________________

ещё раз поехали

article = Article.objects.all()
article
elem = article[0]
print(elem.title)

******************************************гениально***************************
In [36]: article = Article.objects.all()

In [37]: article
Out[37]: <QuerySet [<Article: Article object (1)>]>

In [38]: print(article[0])
Article object (1)

In [39]: elem = article[0]

In [40]: print(elem.title)
Django 5 для начинающих

************************************************** ЗАДАЧА 5 ****************************************

models.py

class Group(models.Model):
    title = models.CharField(max_length=200, verbose_name='Категория')
    slug = models.SlugField(max_length=255, unique=True, verbose_name='URL имя')
    description = models.TextField(verbose_name='Описание')

    class Meta:                
        verbose_name = 'группы'
        verbose_name_plural = 'группы' 
_____________________________

admin.py

from django.contrib import admin
from .models import Article, Group

admin.site.register(Article) 
admin.site.register(Group) 

_____________________________
python manage.py makemigrations article                                 
python manage.py migrate
_____________________________
Используя метод стандартного менеджера модели Group, 
получите QuerySet содержащий все записи из таблицы 
данной модели.

python manage.py shell

from article.models import Group
group = Group.objects.all()
group

from django.db import connection
connection.queries

group = Group.objects.values("id", "title", "slug", "description")

group
Out[7]: <QuerySet [{'id': 1, 'title': 'programmer', 'slug': 'grupp_com', 'description': 'группа программистов'}, 
{'id': 2, 'title': 'robots', 'slug': 'robot_com', 'description': 'группа роботы'}, 
{'id': 3, 'title': 'agent', 'slug': 'agent_com', 'description': 'группа агентов'}]>


************************************************** ЗАДАЧА 6 ****************************************

админка

from django.contrib import admin
from .models import Article, Group, Category

admin.site.register(Article) 
admin.site.register(Group) 
admin.site.register(Category) 

модель

class Category(models.Model):
    name = models.CharField(max_length=50, verbose_name='имя')
    description = models.TextField(max_length=255, blank=True, default='', verbose_name='описание')

    class Meta:                
        verbose_name = 'категории'
        verbose_name_plural = 'категорию' 

_____________________________
python manage.py makemigrations article                                 
python manage.py migrate
_____________________________


Используя метод filter() стандартного менеджера модели Category, получите QuerySet 
содержащий все записи из таблицы данной модели, у которых значение поля name равно строке Django 4

python manage.py shell
from article.models import Category
Category.objects.all()

from django.db import connection
connection.queries

category = Category.objects.filter(name="Django 4")
category

for elem in category:
    print(f"name - {elem.name}, description - {elem.description}")



















